#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <arpa/inet.h>
#include <unistd.h>

#define PORT 53
#define BUFFER_SIZE 512

void handle_query(int sockfd, struct sockaddr_in *client_addr, socklen_t client_len) {
    char buffer[BUFFER_SIZE];
    ssize_t recv_len = recvfrom(sockfd, buffer, BUFFER_SIZE, 0, (struct sockaddr *)client_addr, &client_len);
    
    if (recv_len < 0) {
        perror("recvfrom");
        return;
    }

    printf("Received DNS query\n");

    // Example: Echo back the query for demonstration
    ssize_t send_len = sendto(sockfd, buffer, recv_len, 0, (struct sockaddr *)client_addr, client_len);
    if (send_len < 0) {
        perror("sendto");
    }
}

void run_server() {
    int sockfd;
    struct sockaddr_in server_addr, client_addr;
    socklen_t client_len = sizeof(client_addr);

    if ((sockfd = socket(AF_INET, SOCK_DGRAM, 0)) < 0) {
        perror("socket");
        exit(EXIT_FAILURE);
    }

    memset(&server_addr, 0, sizeof(server_addr));
    server_addr.sin_family = AF_INET;
    server_addr.sin_addr.s_addr = INADDR_ANY;
    server_addr.sin_port = htons(PORT);

    if (bind(sockfd, (struct sockaddr *)&server_addr, sizeof(server_addr)) < 0) {
        perror("bind");
        close(sockfd);
        exit(EXIT_FAILURE);
    }

    printf("DNS server is running on port %d\n", PORT);

    while (1) {
        handle_query(sockfd, &client_addr, client_len);
    }

    close(sockfd);
}

void send_query(const char *server_ip, const char *query) {
    int sockfd;
    struct sockaddr_in server_addr;
    char buffer[BUFFER_SIZE];

    if ((sockfd = socket(AF_INET, SOCK_DGRAM, 0)) < 0) {
        perror("socket");
        exit(EXIT_FAILURE);
    }

    memset(&server_addr, 0, sizeof(server_addr));
    server_addr.sin_family = AF_INET;
    server_addr.sin_port = htons(PORT);

    if (inet_pton(AF_INET, server_ip, &server_addr.sin_addr) <= 0) {
        perror("inet_pton");
        close(sockfd);
        exit(EXIT_FAILURE);
    }

    // Prepare a simple DNS query (example, not fully compliant)
    strcpy(buffer, query);

    ssize_t send_len = sendto(sockfd, buffer, strlen(query), 0, (struct sockaddr *)&server_addr, sizeof(server_addr));
    if (send_len < 0) {
        perror("sendto");
        close(sockfd);
        exit(EXIT_FAILURE);
    }

    struct sockaddr_in from_addr;
    socklen_t from_len = sizeof(from_addr);
    ssize_t recv_len = recvfrom(sockfd, buffer, BUFFER_SIZE, 0, (struct sockaddr *)&from_addr, &from_len);

    if (recv_len < 0) {
        perror("recvfrom");
    } else {
        printf("Received response:\n%s\n", buffer);
    }

    close(sockfd);
}

int main(int argc, char *argv[]) {
    if (argc < 2) {
        fprintf(stderr, "Usage: %s <server/client> [server_ip] [query]\n", argv[0]);
        exit(EXIT_FAILURE);
    }

    if (strcmp(argv[1], "server") == 0) {
        run_server();
    } else if (strcmp(argv[1], "client") == 0) {
        if (argc != 4) {
            fprintf(stderr, "Usage: %s client <server_ip> <query>\n", argv[0]);
            exit(EXIT_FAILURE);
        }
        send_query(argv[2], argv[3]);
    } else {
        fprintf(stderr, "Invalid argument. Use 'server' or 'client'.\n");
        exit(EXIT_FAILURE);
    }

    return 0;
}
